#!/usr/bin/env bash
## This script is invoked like
##
##   $ with-deployed-system node index.js
##
## which will run Node in the environment of a running Geth testnet
## with the Sai system deployed.
##
## The environment has ETH_RPC_URL set along with the contract addresses.
##
## When the script exits, the Geth testnet is stopped and deleted.

# Stop the script if anything fails
set -e

START_TIME=`date +%s`
CWD=`dirname $0`
LIB=$CWD/../lib

# If 'fast' is passed as last arg, set the SKIP_BUILD_IF_ALREADY_BUILT and
# SKIP_SUBMODULE_UPDATE env variables for many speed, much fast, very impress
if [[ "${@:$#}" == 'fast' ]]; then
  export SKIP_BUILD_IF_ALREADY_BUILT=1
  export SKIP_SUBMODULE_UPDATE=1
  set -- "${@:1:$(($#-1))}" # Pop last arg
fi

function sed_inplace {
  # sed's -i argument behaves differently on macOS, hence this hack
  sed -i.bak "$1" $2 && rm $2.bak
}

# Check if a testnet is already running on port 2000
if ! nc -z 127.0.0.1 2000; then

  if [ -n "$SKIP_BUILD_IF_ALREADY_BUILT" ]; then
    echo "Skipping build of dapps that are already built."
  fi

  if [ -n "$SKIP_SUBMODULE_UPDATE" ]; then
    echo "Skipping git submodule update."
  else
    git submodule update --init --recursive
  fi

  # Fix sai deploy script
  sed_inplace '13s/DSToken.*/WETH9)/' $LIB/sai/bin/deploy
  # Change sai deploy scripts (deploy and deploy-fab) to skip dapp build if SKIP_BUILD_IF_ALREADY_BUILT is set and dapp is already built
  sed_inplace 's/^dapp build$/if [[ -z "$SKIP_BUILD_IF_ALREADY_BUILT" || ( -n "$SKIP_BUILD_IF_ALREADY_BUILT" \&\& ! -f out\/SaiTop.abi ) ]]; then dapp build; fi/' $LIB/sai/bin/deploy-fab
  sed_inplace 's/^dapp build$/# dapp build/' $LIB/sai/bin/deploy

  # Speed up ethers.js polling
  $CWD/set-polling-interval

  # Start a local testnet on port 2000; set to stop on exit.
  ./node_modules/.bin/ganache-cli -i 999 -p 2000 -a 1000 -m "hill law jazz limb penalty escape public dish stand bracket blue jar" >./ganache.out 2>&1 & netpid=$!
  trap "kill $netpid" EXIT

  # Wait until it's up, then use it for the deployment.
  echo "Waiting for ganache-cli to start up..."
  export ETH_RPC_URL=http://127.1:2000
  until curl -s -o/dev/null "$ETH_RPC_URL"; do sleep 1; done

  # Configure seth
  export ETH_GAS=${ETH_GAS:-"4000000"}
  export ETH_FROM=$(seth rpc eth_coinbase)
  export SETH_STATUS=yes
  export ETH_RPC_ACCOUNTS=yes # Don't use ethsign

  ############################
  # build sai system

  cd $LIB/sai
  if [[ -z "$SKIP_BUILD_IF_ALREADY_BUILT" || ( -n "$SKIP_BUILD_IF_ALREADY_BUILT" && ! -f out/SaiTop.abi ) ]]; then
    echo "Building and deploying sai contracts..."
  else
    echo "Deploying sai contracts..."
  fi
  bin/deploy-fab 2> /dev/null && . load-fab-unknown
  bin/deploy 2> /dev/null     && . load-env-unknown

  # Set the ETH price feed to 400 USD
  seth send $SAI_PIP "poke(bytes32)" 0x000000000000000000000000000000000000000000000015af1d78b58c400000
  # Set the MKR price feed to 1040.49 USD
  seth send $SAI_PEP "poke(bytes32)" 0x00000000000000000000000000000000000000000000003867bb3260a7cf7200
  seth send $SAI_MOM "setCap(uint256)" $(seth --to-uint256 $(seth --to-wei 1000 eth))
  # Mint MKR, owned by default account
  seth send $SAI_GOV "mint(uint256)" 0x000000000000000000000000000000000000000000000015af1d78b58c400000
  cd -

  ############################
  # build oasis

  export SOLC_FLAGS=${SOLC_FLAGS:-"--optimize"}
  cd $LIB/maker-otc
  if [ -n "$SKIP_BUILD_IF_ALREADY_BUILT" ] && [ -f out/MatchingMarket.abi ]; then
    echo "Skipping dapp build for maker-otc (already built)"
  else
    echo "Building maker-otc..."
    dapp build 2> /dev/null
  fi
  echo "Deploying maker-otc (MatchingMarket)..."
  OTC=$(dapp create MatchingMarket 1577836800) # This is some random date in 2020
  addr1="0xc226f3cd13d508bc319f4f4290172748199d6612"
  addr2="0x7ba25f791fa76c3ef40ac98ed42634a8bc24c238"
  seth send $OTC "addTokenPairWhitelist(address,address)" $addr1 $addr2
  cd -

  ############################
  # build proxy factory

  cd $LIB/ds-proxy
  if [ -n "$SKIP_BUILD_IF_ALREADY_BUILT" ] && [ -f out/DSProxy.abi ]; then
    echo "Skipping dapp build for ds-proxy (already built)"
  else
    echo "Building ds-proxy..."
    dapp build 2> /dev/null
  fi
  echo "Deploying ds-proxy (DSProxyFactory)..."
  DS_PROXY_FACTORY=$(dapp create DSProxyFactory) # Deploy proxy factory instance
  echo "Deployed DSProxyFactory to $DS_PROXY_FACTORY"
  cd -

  ############################
  # build proxy registry

  cd $LIB/proxy-registry
  if [ -n "$SKIP_BUILD_IF_ALREADY_BUILT" ] && [ -f out/ProxyRegistry.abi ]; then
    echo "Skipping dapp build for proxy-registry (already built)"
  else
    echo "Building proxy-registry..."
    dapp build ProxyRegistry 2> /dev/null
  fi
  echo "Deploying proxy-registry (ProxyRegistry)..."
  PROXY_REGISTRY=$(dapp create ProxyRegistry $DS_PROXY_FACTORY) # Deploy proxy registry instance and pass in proxy factory
  echo "Deployed ProxyRegistry to $PROXY_REGISTRY"

  echo "Creating DSProxy via ProxyRegistry.build()..."
  DS_PROXY="0x"$(seth --abi-decode "build()(address)" $(seth call $PROXY_REGISTRY "build()")) # Get expected address of new DSProxy instance about to be created
  seth send $PROXY_REGISTRY "build()"
  echo "Created new DSProxy instance with address: $DS_PROXY"
  cd -

  ############################
  # build sai proxy

  cd $LIB/sai-proxy
  if [ -n "$SKIP_BUILD_IF_ALREADY_BUILT" ] && [ -f out/SaiProxyCreateAndExecute.abi ]; then
    echo "Skipping dapp build for sai-proxy (already built)"
  else
    echo "Building sai-proxy..."
    dapp build 2> /dev/null
  fi
  echo "Deploying sai-proxy (SaiProxyCreateAndExecute)..."
  SAI_PROXY=$(dapp create SaiProxyCreateAndExecute)
  echo "Deployed SaiProxyCreateAndExecute to $SAI_PROXY"
  cd -

  # Save the deployed contract addresses to a JSON file
  cat > $LIB/addresses.json <<- EOM
{
  "GEM": "$SAI_GEM",
  "GOV": "$SAI_GOV",
  "PIP": "$SAI_PIP",
  "PEP": "$SAI_PEP",
  "PIT": "$SAI_PIT",
  "ADM": "$SAI_ADM",
  "SAI": "$SAI_SAI",
  "SIN": "$SAI_SIN",
  "SKR": "$SAI_SKR",
  "DAD": "$SAI_DAD",
  "MOM": "$SAI_MOM",
  "VOX": "$SAI_VOX",
  "TUB": "$SAI_TUB",
  "TAP": "$SAI_TAP",
  "TOP": "$SAI_TOP",
  "MAKER_OTC": "$OTC",
  "DS_PROXY_FACTORY": "$DS_PROXY_FACTORY",
  "PROXY_REGISTRY": "$PROXY_REGISTRY",
  "DS_PROXY": "$DS_PROXY",
  "SAI_PROXY": "$SAI_PROXY"
}
EOM

  # copy necessary files into the app source
  $CWD/update-abis

  END_TIME=`date +%s`
  ELAPSED=`echo $END_TIME - $START_TIME | bc`
  echo "Created testnet in" $ELAPSED "seconds."

else
  echo "You already have a test network running on port 2000."
fi

# We now have SAI_GEM, SAI_SAI, SAI_SKR, etc in the environment.
# See the list at the bottom of the deploy script.

if [[ "$1" != '--ci' ]]; then
  # The testnet will continue to run with its deployed contracts
  # until the user confirms it should shut down.
  $@
  bash $CWD/confirm-kill-testnet
else
  # Proceed to the command given as arguments (but strip --ci as first param).
  $(echo "$@" | sed 's/^\-\-ci //')
fi
